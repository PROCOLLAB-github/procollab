{
    "pipes": [
        {
            "name": "ControlErrorPipe",
            "id": "pipe-ControlErrorPipe-81196790b3d039ed4fce129f778111926a7a9218848ce14aba434c142429c97e3b4d47235df23c3839436136e00e557d3032834401f8de9f48c4a7c690e227bd",
            "file": "src/app/core/pipes/control-error.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "errorName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "errorName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "pure": false,
            "ngname": "controlError",
            "sourceCode": "import { Pipe, PipeTransform } from \"@angular/core\";\nimport { AbstractControl, ValidationErrors } from \"@angular/forms\";\n\n@Pipe({\n  name: \"controlError\",\n  /**\n   * Otherwise, don't work\n   */\n  pure: false,\n})\nexport class ControlErrorPipe implements PipeTransform {\n  transform(value: AbstractControl, errorName?: keyof ValidationErrors): boolean {\n    if (!errorName) {\n      return value.touched && value.invalid;\n    }\n\n    return value.touched && (value.errors ? value.errors[errorName] : false);\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "ApiError",
            "id": "interface-ApiError-73717d0e6d49d46bf913c14281506d2641a0f5eb4db6373846aac7f95d8affa07334a6cb233f18e82b068bbf819a7f91a0d04281e0ed1573b104e8543f300c1a",
            "file": "src/app/core/models/http.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ApiError {\n  detail: string;\n}\n",
            "properties": [
                {
                    "name": "detail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ApiService",
            "id": "injectable-ApiService-702b0472240ab7b1c03b054633981c28ec2c7396267f5eb7396d70f8ffddca4c922f703f8b5350c2e18cd3b343975083d39e8293e65683aaa9f74cb180a86f33",
            "file": "src/app/core/services/api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { first, Observable } from \"rxjs\";\nimport { environment } from \"../../../environments/environment\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ApiService {\n  constructor(private http: HttpClient) {}\n\n  // eslint-disable-next-line no-undef\n  get(path: string, params?: any, options?: any): Observable<any> {\n    return this.http.get(environment.apiUrl + path, { params, ...options }).pipe(first());\n  }\n\n  put(path: string, body: object): Observable<any> {\n    return this.http.put(environment.apiUrl + path, body).pipe(first());\n  }\n\n  post(path: string, body: object): Observable<any> {\n    return this.http.post(environment.apiUrl + path, body).pipe(first());\n  }\n\n  delete(path: string): Observable<any> {\n    return this.http.delete(environment.apiUrl + path).pipe(first());\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-3f7a275b8b0d47114ae1b68bddb05c688b19d55bf32c3aa9f4c5585d6dde23de874e5a43914eecd2ccc015fc3f0b707a5fa5abb0e87ef61f94d99d29cd609c58",
            "file": "src/app/auth/services/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getTokens",
                    "args": [],
                    "optional": false,
                    "returnType": "Tokens | null",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "type": "LoginRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<LoginResponse>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "LoginRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "memTokens",
                    "args": [
                        {
                            "name": "tokens",
                            "type": "Tokens",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "session",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tokens",
                            "type": "Tokens",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "session",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshTokens",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<RefreshResponse>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "data",
                            "type": "RegisterRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<RegisterResponse>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "RegisterRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { ApiService } from \"../../core/services\";\nimport { map, Observable } from \"rxjs\";\nimport {\n  LoginRequest,\n  LoginResponse,\n  RefreshResponse,\n  RegisterRequest,\n  RegisterResponse,\n} from \"../models/http.model\";\nimport { plainToClass } from \"class-transformer\";\nimport { Tokens } from \"../models/tokens\";\n\n@Injectable()\nexport class AuthService {\n  constructor(private apiService: ApiService) {}\n\n  login({ email, password }: LoginRequest): Observable<LoginResponse> {\n    return this.apiService\n      .post(\"/auth/login\", { email, password })\n      .pipe(map(json => plainToClass(LoginResponse, json)));\n  }\n\n  register(data: RegisterRequest): Observable<RegisterResponse> {\n    return this.apiService\n      .post(\"/auth/register\", data)\n      .pipe(map(json => plainToClass(RegisterResponse, json)));\n  }\n\n  refreshTokens(): Observable<RefreshResponse> {\n    return this.apiService\n      .post(\"/auth/refresh-tokens\", { refresh_token: localStorage.getItem(\"refreshToken\") })\n      .pipe(map(json => plainToClass(RefreshResponse, json)));\n  }\n\n  getTokens(): Tokens | null {\n    const accessToken =\n      localStorage.getItem(\"accessToken\") ?? sessionStorage.getItem(\"accessToken\");\n    const refreshToken =\n      localStorage.getItem(\"refreshToken\") ?? sessionStorage.getItem(\"refreshToken\");\n\n    if (!accessToken && !refreshToken) {\n      return null;\n    }\n\n    return { accessToken: accessToken as string, refreshToken: accessToken as string };\n  }\n\n  memTokens(tokens: Tokens, session = false): void {\n    if (!session) {\n      localStorage.setItem(\"accessToken\", tokens.accessToken);\n      localStorage.setItem(\"refreshToken\", tokens.refreshToken);\n    } else {\n      sessionStorage.setItem(\"accessToken\", tokens.accessToken);\n      sessionStorage.setItem(\"refreshToken\", tokens.refreshToken);\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ErrorService",
            "id": "injectable-ErrorService-0c71cab9ac0d61f94297f34e4d77ab03c29291f7312b6751195235837d22eae82955490d289f2dc74384bdc2d90d6ed063ff565e3312aaa51bb28aa073c60886",
            "file": "src/app/error/services/error.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "throwError",
                    "args": [
                        {
                            "name": "type",
                            "type": "ErrorCode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "ErrorCode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "throwNotFount",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "throwServerError",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { ErrorCode } from \"../models/error-code\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ErrorService {\n  constructor(private router: Router) {}\n\n  throwNotFount(): Promise<void> {\n    return this.throwError(ErrorCode.NOT_FOUND);\n  }\n\n  throwServerError(): Promise<void> {\n    return this.throwError(ErrorCode.SERVER_ERROR);\n  }\n\n  private throwError(type: ErrorCode): Promise<void> {\n    return this.router.navigateByUrl(`/error/${type}`).then(() => console.debug(\"Route Changed\"));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ValidationService",
            "id": "injectable-ValidationService-172cc714b3ef425b179bc75b21ae7e0b271ee0dad48f0c1058a8961626c0de7e511b0b8ca803a1e444526e1e9f0964c79707d498ac7b109c972503b5f459e5d5",
            "file": "src/app/core/services/validation.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "useMatchValidator",
                    "args": [
                        {
                            "name": "left",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "right",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "left",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "right",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { ValidatorFn } from \"@angular/forms\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ValidationService {\n  constructor() {}\n\n  useMatchValidator(left: string, right: string): ValidatorFn {\n    return group => {\n      if (!group.get(left) || !group.get(right)) {\n        throw new Error(`No control with name ${left} or ${right}`);\n      }\n\n      // @ts-ignore\n      return group.get(left).value !== group.get(right).value ? { unMatch: true } : null;\n    };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [
        {
            "name": "BearerTokenInterceptor",
            "id": "injectable-BearerTokenInterceptor-4e86d77db9dfe7f8805ed898aa644175d27f9aa03788f0760e30471a503893b47108f5f7b93114c0541d1c9bbb53be08a967066723cf84d88820f16c5b3803db",
            "file": "src/app/core/interceptors/bearer-token.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpHeaders,\n  HttpInterceptor,\n  HttpRequest,\n} from \"@angular/common/http\";\nimport { catchError, Observable, switchMap, throwError } from \"rxjs\";\nimport { AuthService } from \"../../auth/services\";\n\n@Injectable()\nexport class BearerTokenInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const headers = new HttpHeaders();\n    const tokens = this.authService.getTokens();\n\n    if (tokens) {\n      headers.set(\"Authorization\", `Bearer ${tokens.accessToken}`);\n    }\n\n    const req = request.clone({ headers });\n    return next.handle(req).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 401) {\n          return this.authService.refreshTokens().pipe(\n            switchMap(res => {\n              this.authService.memTokens(res);\n              const headers = new HttpHeaders();\n\n              const tokens = this.authService.getTokens();\n\n              if (tokens) {\n                headers.set(\"Authorization\", `Bearer ${tokens.accessToken}`);\n              }\n\n              return next.handle(\n                request.clone({\n                  headers,\n                })\n              );\n            })\n          );\n        }\n\n        return throwError(() => error);\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        },
        {
            "name": "CamelcaseInterceptor",
            "id": "injectable-CamelcaseInterceptor-684fae64dcd830eeda864faf4be113e3b39768493ecd6cabda66be913542acac01762dd55e9b38cfd1c11a1814ea66c4d91a0e42efaff4e1e5326148b8f16d9a",
            "file": "src/app/core/interceptors/camelcase.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from \"@angular/common/http\";\nimport { map, Observable } from \"rxjs\";\nimport * as snakecaseKeys from \"snakecase-keys\";\nimport camelcaseKeys from \"camelcase-keys\";\n\n@Injectable()\nexport class CamelcaseInterceptor implements HttpInterceptor {\n  constructor() {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const req = request.clone({\n      // @ts-ignore\n      body: snakecaseKeys(request.body, { deep: true }),\n    });\n\n    return next.handle(req).pipe(\n      map((event: HttpEvent<any>) => {\n        if (event instanceof HttpResponse) {\n          return event.clone({\n            body: camelcaseKeys(event.body, { deep: true }),\n          });\n        }\n\n        return event;\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "LoginRequest",
            "id": "class-LoginRequest-bc63bd023afb36564d0be315b97d8452ed7645608e03150a624fa513a2a85dd3128bc7ea8a0b987e40f7ddba8dae8102829fe11c2a327cd4cd73cef283743761",
            "file": "src/app/auth/models/http.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class LoginRequest {\n  email!: string;\n  password!: string;\n}\n\nexport class LoginResponse {\n  accessToken!: string;\n  refreshToken!: string;\n  tokenType!: \"Bearer\";\n}\n\nexport class RefreshResponse {\n  accessToken!: string;\n  refreshToken!: string;\n  tokenType!: \"Bearer\";\n}\n\nexport class RegisterRequest {\n  name!: string;\n  surname!: string;\n  birthday!: string;\n  email!: string;\n  password!: string;\n}\nexport class RegisterResponse extends LoginResponse {}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoginResponse",
            "id": "class-LoginResponse-bc63bd023afb36564d0be315b97d8452ed7645608e03150a624fa513a2a85dd3128bc7ea8a0b987e40f7ddba8dae8102829fe11c2a327cd4cd73cef283743761",
            "file": "src/app/auth/models/http.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class LoginRequest {\n  email!: string;\n  password!: string;\n}\n\nexport class LoginResponse {\n  accessToken!: string;\n  refreshToken!: string;\n  tokenType!: \"Bearer\";\n}\n\nexport class RefreshResponse {\n  accessToken!: string;\n  refreshToken!: string;\n  tokenType!: \"Bearer\";\n}\n\nexport class RegisterRequest {\n  name!: string;\n  surname!: string;\n  birthday!: string;\n  email!: string;\n  password!: string;\n}\nexport class RegisterResponse extends LoginResponse {}\n",
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "tokenType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RefreshResponse",
            "id": "class-RefreshResponse-bc63bd023afb36564d0be315b97d8452ed7645608e03150a624fa513a2a85dd3128bc7ea8a0b987e40f7ddba8dae8102829fe11c2a327cd4cd73cef283743761",
            "file": "src/app/auth/models/http.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class LoginRequest {\n  email!: string;\n  password!: string;\n}\n\nexport class LoginResponse {\n  accessToken!: string;\n  refreshToken!: string;\n  tokenType!: \"Bearer\";\n}\n\nexport class RefreshResponse {\n  accessToken!: string;\n  refreshToken!: string;\n  tokenType!: \"Bearer\";\n}\n\nexport class RegisterRequest {\n  name!: string;\n  surname!: string;\n  birthday!: string;\n  email!: string;\n  password!: string;\n}\nexport class RegisterResponse extends LoginResponse {}\n",
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "tokenType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RegisterRequest",
            "id": "class-RegisterRequest-bc63bd023afb36564d0be315b97d8452ed7645608e03150a624fa513a2a85dd3128bc7ea8a0b987e40f7ddba8dae8102829fe11c2a327cd4cd73cef283743761",
            "file": "src/app/auth/models/http.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class LoginRequest {\n  email!: string;\n  password!: string;\n}\n\nexport class LoginResponse {\n  accessToken!: string;\n  refreshToken!: string;\n  tokenType!: \"Bearer\";\n}\n\nexport class RefreshResponse {\n  accessToken!: string;\n  refreshToken!: string;\n  tokenType!: \"Bearer\";\n}\n\nexport class RegisterRequest {\n  name!: string;\n  surname!: string;\n  birthday!: string;\n  email!: string;\n  password!: string;\n}\nexport class RegisterResponse extends LoginResponse {}\n",
            "properties": [
                {
                    "name": "birthday",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "surname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RegisterResponse",
            "id": "class-RegisterResponse-bc63bd023afb36564d0be315b97d8452ed7645608e03150a624fa513a2a85dd3128bc7ea8a0b987e40f7ddba8dae8102829fe11c2a327cd4cd73cef283743761",
            "file": "src/app/auth/models/http.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class LoginRequest {\n  email!: string;\n  password!: string;\n}\n\nexport class LoginResponse {\n  accessToken!: string;\n  refreshToken!: string;\n  tokenType!: \"Bearer\";\n}\n\nexport class RefreshResponse {\n  accessToken!: string;\n  refreshToken!: string;\n  tokenType!: \"Bearer\";\n}\n\nexport class RegisterRequest {\n  name!: string;\n  surname!: string;\n  birthday!: string;\n  email!: string;\n  password!: string;\n}\nexport class RegisterResponse extends LoginResponse {}\n",
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "LoginResponse"
                    }
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "LoginResponse"
                    }
                },
                {
                    "name": "tokenType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "LoginResponse"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "LoginResponse",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Tokens",
            "id": "class-Tokens-6773ee4c008ce149a89e75b7706a355c8de6b7be2ced627970de1b45787a62bd539ae49361e53ed14fdd7be3f5ce059f307b9943277b725b404159bbc055f23e",
            "file": "src/app/auth/models/tokens.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Tokens {\n  accessToken!: string;\n  refreshToken!: string;\n}\n",
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-7529d1e83f370cc2c628f16bd1137be200c9b9bdc10eb15f950668965e5d5e773fb5ef0e31ffc510969f69f1f94d4de83fad951751715692c5d8400a3db8f78b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.scss\"],\n})\nexport class AppComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/** @format */\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<!-- @format -->\n\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "AuthComponent",
            "id": "component-AuthComponent-d61509c1bc7629e170743947c9d18ef37e332eda62857369bb057f096883c6422ce1ec77ab5579516fdcad272e83613490e33e64a472e5eef29dda789c56c4bd",
            "file": "src/app/auth/auth.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-auth",
            "styleUrls": [
                "./auth.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./auth.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"app-auth\",\n  templateUrl: \"./auth.component.html\",\n  styleUrls: [\"./auth.component.scss\"],\n})\nexport class AuthComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/** @format */\n\n.page {\n  position: relative;\n  height: 100vh;\n  background: var(--bg-main) no-repeat center/cover url(\"/assets/images/auth/bg.png\");\n\n  &__header {\n    display: flex;\n    padding: 20px 140px;\n  }\n\n  &__body {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 790px;\n    padding: 40px 200px 70px;\n    background: radial-gradient(\n      123.12% 427.27% at -3.17% 0%,\n      rgb(170 255 255 / 14%) 3.43%,\n      rgb(170 255 255 / 0%) 100%\n    );\n    background-blend-mode: overlay, normal;\n    border-radius: var(--rounded-lg);\n    transform: translate(-50%, -50%);\n    backdrop-filter: blur(39px);\n  }\n}\n",
                    "styleUrl": "./auth.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- @format -->\n\n<div class=\"page\">\n  <header class=\"page__header\">\n    <img src=\"/assets/images/shared/logo.png\" width=\"150px\" alt=\"pro_collab\" />\n  </header>\n  <div class=\"page__body\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-6c8d43ebf2b89c99b623a89e648123c87f48a3f4a826b6832fa2ea39d2d28b4b0fa5e1247fd4832a32739f253f248efded9097b4c06bba7260c50c18fddc2b4a",
            "file": "src/app/ui/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"app-button\",\n  templateUrl: \"./button.component.html\",\n  styleUrls: [\"./button.component.scss\"],\n})\nexport class ButtonComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/** @format */\n\n.button {\n  padding: 18px;\n  color: var(--white);\n  cursor: pointer;\n  text-align: center;\n  min-width: 350px;\n  background: var(--gradient);\n  border: none;\n  border-radius: var(--rounded-md);\n  outline: none;\n  transition: background-color 0.2s;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- @format -->\n\n<button class=\"button\">\n  <ng-content></ng-content>\n</button>\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-d20149a51d63f6fceee55c58ae499bb9c09239d8136a886382c33cab4df7791dcba5e17b1fae76d4becb251a1287879b25e80fa11a8e4e71a7e5c004fdf83ea4",
            "file": "src/app/ui/components/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "checkedChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\";\n\n@Component({\n  selector: \"app-checkbox\",\n  templateUrl: \"./checkbox.component.html\",\n  styleUrls: [\"./checkbox.component.scss\"],\n})\nexport class CheckboxComponent implements OnInit {\n  @Input() checked = false;\n  @Output() checkedChange = new EventEmitter<boolean>();\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/** @format */\n\n$border-width: 2px;\n\n.field {\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 20px;\n  height: 20px;\n  cursor: pointer;\n  border: $border-width solid var(--gray);\n  background-clip: border-box;\n  border-radius: var(--rounded-sm);\n\n  &--checked {\n    border-color: transparent;\n  }\n\n  &__bg {\n    position: absolute;\n    inset: -$border-width;\n    border-radius: var(--rounded-sm);\n    background-image: var(--gradient);\n  }\n\n  &__check {\n    display: block;\n    width: 100%;\n    height: 100%;\n    color: var(--blue-dark);\n  }\n}\n",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- @format -->\n<div class=\"field\" [class.field--checked]=\"checked\" (click)=\"checkedChange.emit(!checked)\">\n  <div *ngIf=\"checked\" class=\"field__bg\"></div>\n  <!-- TODO: change to new ckeck icon  <app-icon *ngIf=\"checked\" class=\"field__check\" icon=\"check\" appViewBox=\"0 0 18 17\"></app-icon> -->\n</div>\n"
        },
        {
            "name": "ErrorCodeComponent",
            "id": "component-ErrorCodeComponent-461c9a6628a3c41e4e84b4307542eb6eb7a9bc181ea5741585c53e4f08ce2868487c38b82cb5f365bfc79eb05e0a5aad2e80f06cbf76b40736b9e71157f52b62",
            "file": "src/app/error/code/error-code.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-code",
            "styleUrls": [
                "./error-code.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./error-code.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorCode",
                    "defaultValue": "this.activatedRoute.params.pipe(pluck(\"code\"))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { pluck } from \"rxjs\";\n\n@Component({\n  selector: \"app-code\",\n  templateUrl: \"./error-code.component.html\",\n  styleUrls: [\"./error-code.component.scss\"],\n})\nexport class ErrorCodeComponent implements OnInit {\n  errorCode = this.activatedRoute.params.pipe(pluck(\"code\"));\n\n  constructor(private activatedRoute: ActivatedRoute) {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".error {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &__code {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 580px;\n    height: 580px;\n    margin-bottom: 20px;\n    color: var(--error-code);\n    background: radial-gradient(50% 50% at 50% 50%, rgb(0 200 147 / 51%) 0%, rgb(0 200 147 / 0%) 100%);\n  }\n\n  &__title {\n    margin-bottom: 20px;\n    color: var(--gray-100);\n    text-align: center;\n  }\n\n  &__link {\n    display: block;\n    text-align: center;\n  }\n}\n",
                    "styleUrl": "./error-code.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- @format -->\n\n<div class=\"error\">\n  <div class=\"error__body\">\n    <div class=\"text-error-code error__code\">{{ errorCode | async }}</div>\n    <h1 class=\"text-h2 error__title\">Какая-то непонятная ошибка</h1>\n    <a class=\"text-p1 error__link\" routerLink=\"/\">Вернуться на главную</a>\n  </div>\n</div>\n"
        },
        {
            "name": "ErrorComponent",
            "id": "component-ErrorComponent-32cbf03addbefc455f409c5cc3a67600dc1bdc3a8c15d8db7fa21904f0edaaa651415dbf22170504c586882d4ab2e3d4c758215f6878ce4644592f33dd5241c1",
            "file": "src/app/error/error.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-error",
            "styleUrls": [
                "./error.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./error.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-error',\n  templateUrl: './error.component.html',\n  styleUrls: ['./error.component.scss']\n})\nexport class ErrorComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/** @format */\n\n.page {\n  position: relative;\n  height: 100vh;\n  background-color: var(--bg-main);\n\n  &__header {\n    display: flex;\n    padding: 20px 140px;\n  }\n}\n",
                    "styleUrl": "./error.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- @format -->\n\n<main class=\"page\">\n  <header class=\"page__header\">\n    <img src=\"/assets/images/shared/logo.png\" width=\"150px\" alt=\"pro_collab\" />\n  </header>\n  <router-outlet></router-outlet>\n</main>\n"
        },
        {
            "name": "ErrorMessageComponent",
            "id": "component-ErrorMessageComponent-5e2cb58447210121fc8ebfc3bff1a0fd691c2662de597e616834e112ba765a01d31823d6bc024b34bc043dc18fd91a154fa5ff3b21a1fe393c4cb5133ecbca8e",
            "file": "src/app/ui/components/error-message/error-message.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-error-message",
            "styleUrls": [
                "./error-message.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./error-message.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-error-message',\n  templateUrl: './error-message.component.html',\n  styleUrls: ['./error-message.component.scss']\n})\nexport class ErrorMessageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/styles/typography\";\n\n.error {\n  display: flex;\n  align-items: center;\n  color: var(--error);\n\n  @include text-p2;\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n\n  app-icon {\n    margin-right: 5px;\n  }\n}\n",
                    "styleUrl": "./error-message.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- @format -->\n\n<div class=\"error\">\n  <app-icon icon=\"color-error\" appSquare=\"16\"></app-icon>\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "ErrorNotFoundComponent",
            "id": "component-ErrorNotFoundComponent-bc912ab081813394d79416770ee5eb246779b20da91cc6554805c1f2bd760bfa3bf3e5ade225d525fa9a4f3e30fc4477542abe0414fd38a4f98b97cedd4bbe6a",
            "file": "src/app/error/not-found/error-not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-not-found",
            "styleUrls": [
                "./error-not-found.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./error-not-found.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"app-not-found\",\n  templateUrl: \"./error-not-found.component.html\",\n  styleUrls: [\"./error-not-found.component.scss\"],\n})\nexport class ErrorNotFoundComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".error {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &__code {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 580px;\n    height: 580px;\n    margin-bottom: 20px;\n    color: var(--error-code);\n    background: radial-gradient(50% 50% at 50% 50%, rgb(0 200 147 / 51%) 0%, rgb(0 200 147 / 0%) 100%);\n  }\n\n  &__title {\n    margin-bottom: 20px;\n    color: var(--gray-100);\n    text-align: center;\n  }\n\n  &__link {\n    display: block;\n    text-align: center;\n  }\n}\n",
                    "styleUrl": "./error-not-found.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- @format -->\n\n<div class=\"error\">\n  <div class=\"error__body\">\n    <div class=\"text-error-code error__code\">404</div>\n    <h1 class=\"text-h2 error__title\">Страница не найдена</h1>\n    <a class=\"text-p1 error__link\" routerLink=\"/\">Вернуться на главную</a>\n  </div>\n</div>\n"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-060436cc69c1db7fe24ebc9fab93d9b4eae2f03abca412583c6b9bb6a0768384dbd1b1afe43b26a37949c8fe921e90d38c82ca6b829150c9f24dbe70d9b1e02e",
            "file": "src/app/ui/components/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-icon",
            "styleUrls": [
                "./icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "appSquare",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "appViewBox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "appWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "square",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "viewBox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "viewBoxInfo",
                    "args": [
                        {
                            "name": "viewBox",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "viewBox",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"app-icon\",\n  templateUrl: \"./icon.component.html\",\n  styleUrls: [\"./icon.component.scss\"],\n})\nexport class IconComponent implements OnInit {\n  @Input()\n  set appSquare(square: string) {\n    this.square = square;\n\n    !this.viewBox && (this.viewBox = `0 0 ${square} ${square}`);\n  }\n\n  get appSquare(): string {\n    return this.square;\n  }\n\n  @Input()\n  set appViewBox(viewBox: string) {\n    this.viewBox = viewBox;\n  }\n\n  get appViewBox(): string {\n    return this.viewBox;\n  }\n\n  @Input()\n  set appWidth(width: string) {\n    this.width = width;\n\n    if (this.viewBox) {\n      const viewbox = this.viewBoxInfo(this.viewBox);\n      viewbox[2] = width;\n      !this.viewBox && (this.viewBox = viewbox.join(\" \"));\n    }\n  }\n\n  get appWidth(): string {\n    return this.width;\n  }\n\n  @Input()\n  set appHeight(height: string) {\n    this.height = height;\n\n    if (this.viewBox) {\n      const viewbox = this.viewBoxInfo(this.viewBox);\n      viewbox[3] = height;\n      !this.viewBox && (this.viewBox = viewbox.join(\" \"));\n    }\n  }\n\n  get appHeight(): string {\n    return this.height;\n  }\n\n  @Input() icon!: string;\n\n  square!: string;\n  viewBox!: string;\n\n  width!: string;\n  height!: string;\n\n  ngOnInit(): void {}\n\n  viewBoxInfo(viewBox: string): string[] {\n    return viewBox.split(\" \");\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/** @format */\n\n.icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 20px;\n  height: 20px;\n\n  svg {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 100%;\n  }\n}\n",
                    "styleUrl": "./icon.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "appSquare": {
                    "name": "appSquare",
                    "setSignature": {
                        "name": "appSquare",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "square",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 12,
                        "jsdoctags": [
                            {
                                "name": "square",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "appSquare",
                        "type": "string",
                        "returnType": "string",
                        "line": 18
                    }
                },
                "appViewBox": {
                    "name": "appViewBox",
                    "setSignature": {
                        "name": "appViewBox",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "viewBox",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 23,
                        "jsdoctags": [
                            {
                                "name": "viewBox",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "appViewBox",
                        "type": "string",
                        "returnType": "string",
                        "line": 27
                    }
                },
                "appWidth": {
                    "name": "appWidth",
                    "setSignature": {
                        "name": "appWidth",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "width",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "jsdoctags": [
                            {
                                "name": "width",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "appWidth",
                        "type": "string",
                        "returnType": "string",
                        "line": 42
                    }
                },
                "appHeight": {
                    "name": "appHeight",
                    "setSignature": {
                        "name": "appHeight",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "height",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "height",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "appHeight",
                        "type": "string",
                        "returnType": "string",
                        "line": 57
                    }
                }
            },
            "templateData": "<!-- @format -->\n\n<div class=\"icon\">\n  <svg [attr.width]=\"square || width\" [attr.height]=\"square || height\" [attr.viewBox]=\"viewBox\">\n    <use [attr.xlink:href]=\"'assets/icons/sprite.svg#' + icon\"></use>\n  </svg>\n</div>\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-f82fce375e7f5506229205d13652e800e3a2d1d3494c62f72887711aa895dcf26ca2c97186f9234d3b05d951bfde2345aa29bc1918c3e8e20a416a414a87848e",
            "file": "src/app/ui/components/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appMask",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "\"text\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "\"text\" | \"password\" | \"email\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "value",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "v",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "v",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, forwardRef, Input, OnInit } from \"@angular/core\";\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\n@Component({\n  selector: \"app-input\",\n  templateUrl: \"./input.component.html\",\n  styleUrls: [\"./input.component.scss\"],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputComponent),\n      multi: true,\n    },\n  ],\n})\nexport class InputComponent implements OnInit, ControlValueAccessor {\n  @Input() placeholder = \"\";\n  @Input() type: \"text\" | \"password\" | \"email\" = \"text\";\n  @Input() error = false;\n  @Input() appMask = \"\";\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  onInput(event: Event): void {\n    const value = (event.target as HTMLInputElement).value;\n    this.onChange(value);\n  }\n\n  onBlur(): void {\n    this.onTouch();\n  }\n\n  value = \"\";\n  writeValue(value: string): void {\n    this.value = value;\n  }\n\n  onChange: (value: string) => void = () => {};\n  registerOnChange(fn: (v: string) => void): void {\n    this.onChange = fn;\n  }\n\n  onTouch: () => void = () => {};\n  registerOnTouched(fn: () => void): void {\n    this.onTouch = fn;\n  }\n\n  disabled = false;\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/** @format */\n\n.field {\n  position: relative;\n\n  &__input {\n    width: 100%;\n    color: var(--black);\n    padding: 18px 20px;\n    background-color: var(--white);\n    border: 1px solid var(--gray);\n    border-radius: var(--rounded-md);\n    outline: none;\n    transition: all 0.2s;\n\n    &::placeholder {\n      color: var(--dark-gray);\n    }\n\n    &--error {\n      border-color: var(--red);\n    }\n\n    &:not(.field__input--error):focus {\n      box-shadow: 0px 0px 6px rgba(109, 40, 255, 0.3);\n\n      & + .field__gradient {\n        background: var(--gradient);\n      }\n    }\n  }\n\n  &__gradient {\n    position: absolute;\n    inset: 0;\n    margin: -1px;\n    z-index: -1;\n    border-radius: var(--rounded-md);\n    background: transparent;\n    transition: all 0.2s;\n  }\n\n  &__error-icon {\n    position: absolute;\n    top: 50%;\n    right: 26px;\n    transform: translateY(-50%);\n  }\n}\n",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<!-- @format -->\n\n<div class=\"field\" [class.field--error]=\"error\">\n  <div class=\"field__left-icon\">\n    <ng-content select=\"left-icon\"></ng-content>\n  </div>\n  <input\n    [value]=\"value\"\n    (input)=\"onInput($event)\"\n    (blur)=\"onBlur()\"\n    [placeholder]=\"placeholder\"\n    [type]=\"type\"\n    [mask]=\"appMask\"\n    class=\"text-p1 field__input\"\n    [class.field__input--error]=\"error\"\n  />\n  <div class=\"field__gradient\"></div>\n  <div *ngIf=\"error\" class=\"field__error-icon\">\n    <app-icon icon=\"color-error\" appSquare=\"20\"></app-icon>\n  </div>\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-a7f48e4fe0a0fe5cdf5b23e98aeba5d38f557f061b094bb885bb761cdc74dc9575f07c9f20e8efc30e18152fd0c5f8ea53989f7a0268b9027562e16430e00a34",
            "file": "src/app/auth/login/login.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "ErrorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "errorWrongAuth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "loginMem",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { AuthService } from \"../services\";\nimport { ErrorMessage } from \"../../error/models/error-message\";\n\n@Component({\n  selector: \"app-login\",\n  templateUrl: \"./login.component.html\",\n  styleUrls: [\"./login.component.scss\"],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup;\n  loginMem = false;\n\n  errorWrongAuth = false;\n  errorMessage = ErrorMessage;\n\n  constructor(private fb: FormBuilder, private authService: AuthService) {\n    this.loginForm = this.fb.group({\n      email: [\"\", [Validators.required, Validators.email]],\n      password: [\"\", [Validators.required, Validators.minLength(6)]],\n    });\n  }\n\n  ngOnInit(): void {}\n\n  onSubmit() {\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    this.authService.login(this.loginForm.value).subscribe(\n      res => {\n        this.authService.memTokens(res, !this.loginMem);\n      },\n      error => {\n        if (error.error?.detail === \"Incorrect email or password\") {\n          this.errorWrongAuth = true;\n        }\n      }\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/** @format */\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- @format -->\n\n<form class=\"auth\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n  <h1 class=\"text-h4 auth__title\">Вход</h1>\n  <fieldset *ngIf=\"loginForm.get('email') as email\" class=\"auth__field\">\n    <app-input\n      [error]=\"email | controlError\"\n      type=\"email\"\n      formControlName=\"email\"\n      placeholder=\"Введите почту\"\n    ></app-input>\n    <app-error-message *ngIf=\"email | controlError: 'email'\" class=\"auth__error\">\n      {{ errorMessage.VALIDATION_EMAIL }}\n    </app-error-message>\n    <app-error-message *ngIf=\"email | controlError: 'required'\" class=\"auth__error\">\n      {{ errorMessage.VALIDATION_REQUIRED }}\n    </app-error-message>\n  </fieldset>\n  <fieldset *ngIf=\"loginForm.get('password') as password\" class=\"auth__field\">\n    <app-input\n      [error]=\"password | controlError\"\n      type=\"password\"\n      formControlName=\"password\"\n      placeholder=\"Пароль\"\n    ></app-input>\n    <app-error-message *ngIf=\"password | controlError: 'required'\" class=\"auth__error\">\n      {{ errorMessage.VALIDATION_REQUIRED }}\n    </app-error-message>\n    <app-error-message *ngIf=\"password | controlError: 'minlength'\" class=\"auth__error\">\n      {{ errorMessage.VALIDATION_TOO_SHORT }} {{ password.errors?.minlength.requiredLength }}\n    </app-error-message>\n  </fieldset>\n  <div class=\"auth__agreement\">\n    <app-checkbox class=\"auth__checkbox\" [(checked)]=\"loginMem\"></app-checkbox>\n    <span class=\"text-p1 auth__agreement-text\" (click)=\"loginMem = !loginMem\">Запомнить меня</span>\n  </div>\n  <app-error-message *ngIf=\"errorWrongAuth\">\n    {{ errorMessage.AUTH_WRONG_AUTH }}\n  </app-error-message>\n  <app-button class=\"auth__button\" size=\"lg\">Войти</app-button>\n</form>\n"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-8cc7956fef76d865e81592ef834039c7eec45ef02af029950f3a0c638ace7ae80a577b6c2a3df220c353b95389377ca561e9efee95b3947916ca55759dc38323",
            "file": "src/app/auth/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./register.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessages",
                    "defaultValue": "ErrorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "registerForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { AuthService } from \"../services\";\nimport { ValidationService } from \"../../core/services\";\nimport { ErrorMessage } from \"../../error/models/error-message\";\n\n@Component({\n  selector: \"app-login\",\n  templateUrl: \"./register.component.html\",\n  styleUrls: [\"./register.component.scss\"],\n})\nexport class RegisterComponent implements OnInit {\n  registerForm: FormGroup;\n\n  errorMessages = ErrorMessage;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private validationService: ValidationService\n  ) {\n    this.registerForm = this.fb.group(\n      {\n        name: [\"\", [Validators.required]],\n        surname: [\"\", [Validators.required]],\n        email: [\"\", [Validators.required, Validators.email]],\n        birthday: [\"\", [Validators.required]],\n        password: [\"\", [Validators.required]],\n        repeatedPassword: [\"\", [Validators.required]],\n      },\n      { validators: [this.validationService.useMatchValidator(\"password\", \"repeatedPassword\")] }\n    );\n  }\n\n  ngOnInit(): void {}\n\n  onSubmit() {\n    if (this.registerForm.invalid) {\n      return;\n    }\n\n    const form = { ...this.registerForm.value };\n    delete form.repeatedPassword;\n    this.authService.register(form).subscribe(res => {\n      this.authService.memTokens(res);\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/** @format */\n",
                    "styleUrl": "./register.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- @format -->\n\n<form class=\"auth\" [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n  <h1 class=\"text-h4 auth__title\">Регистрация</h1>\n  <fieldset *ngIf=\"registerForm.get('name') as name\" class=\"auth__field\">\n    <app-input\n      [error]=\"name | controlError\"\n      type=\"text\"\n      formControlName=\"name\"\n      placeholder=\"Имя\"\n    ></app-input>\n    <app-error-message *ngIf=\"name | controlError: 'required'\" class=\"auth__error\">\n      {{ errorMessages.VALIDATION_REQUIRED }}\n    </app-error-message>\n  </fieldset>\n  <fieldset *ngIf=\"registerForm.get('surname') as surname\" class=\"auth__field\">\n    <app-input\n      [error]=\"surname | controlError\"\n      type=\"text\"\n      formControlName=\"surname\"\n      placeholder=\"Фамилия\"\n    ></app-input>\n    <app-error-message *ngIf=\"surname | controlError: 'required'\" class=\"auth__error\">\n      {{ errorMessages.VALIDATION_REQUIRED }}\n    </app-error-message>\n  </fieldset>\n  <fieldset *ngIf=\"registerForm.get('birthday') as birthday\" class=\"auth__field\">\n    <app-input\n      [error]=\"birthday | controlError\"\n      type=\"text\"\n      appMask=\"00.00.0000\"\n      formControlName=\"birthday\"\n      placeholder=\"Дата рождения\"\n    ></app-input>\n    <app-error-message *ngIf=\"birthday | controlError: 'required'\" class=\"auth__error\">\n      {{ errorMessages.VALIDATION_REQUIRED }}\n    </app-error-message>\n  </fieldset>\n  <fieldset *ngIf=\"registerForm.get('email') as email\" class=\"auth__field\">\n    <app-input\n      [error]=\"email | controlError\"\n      type=\"email\"\n      formControlName=\"email\"\n      placeholder=\"Введите почту\"\n    ></app-input>\n    <app-error-message *ngIf=\"email | controlError: 'required'\" class=\"auth__error\">\n      {{ errorMessages.VALIDATION_REQUIRED }}\n    </app-error-message>\n  </fieldset>\n  <fieldset *ngIf=\"registerForm.get('password') as password\" class=\"auth__field\">\n    <app-input\n      [error]=\"password | controlError\"\n      type=\"password\"\n      formControlName=\"password\"\n      placeholder=\"Пароль\"\n    ></app-input>\n    <app-error-message *ngIf=\"password | controlError: 'required'\" class=\"auth__error\">\n      {{ errorMessages.VALIDATION_REQUIRED }}\n    </app-error-message>\n  </fieldset>\n  <fieldset *ngIf=\"registerForm.get('repeatedPassword') as repeatedPassword\" class=\"auth__field\">\n    <app-input\n      [error]=\"repeatedPassword | controlError\"\n      type=\"password\"\n      formControlName=\"repeatedPassword\"\n      placeholder=\"Повторите пароль\"\n    ></app-input>\n    <app-error-message *ngIf=\"repeatedPassword | controlError: 'required'\" class=\"auth__error\">\n      {{ errorMessages.VALIDATION_REQUIRED }}\n    </app-error-message>\n    <app-error-message\n      class=\"auth__error\"\n      *ngIf=\"registerForm.get('repeatedPassword')?.touched && registerForm.errors?.unMatch\"\n    >\n      {{ errorMessages.VALIDATION_PASSWORD_UNMATCH }}\n    </app-error-message>\n  </fieldset>\n  <app-button class=\"auth__button\" size=\"lg\">Регистрация</app-button>\n</form>\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-9d6c61e14ec97455ff7dbb171372a4ba77158ab2f9a576b3f5ae2cb39761ab14552520f1a4a9fb0697480e0821073bfd2050987964f789891b0e6b908d4ba960",
            "file": "src/app/ui/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SelectComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "basicLabel",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "literal type[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "selectedId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "getId",
                    "args": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | undefined",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLabel",
                    "args": [
                        {
                            "name": "optionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "optionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "optionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "optionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickOutside",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUpdate",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, forwardRef, Input, OnInit } from \"@angular/core\";\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\n@Component({\n  selector: \"app-select\",\n  templateUrl: \"./select.component.html\",\n  styleUrls: [\"./select.component.scss\"],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SelectComponent),\n      multi: true,\n    },\n  ],\n})\nexport class SelectComponent implements OnInit, ControlValueAccessor {\n  @Input() basicLabel = \"\";\n  @Input() options: { value: string; label: string; id: number }[] = [];\n\n  isOpen = false;\n\n  selectedId?: number;\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  writeValue(label: string) {\n    this.selectedId = this.getId(label);\n  }\n\n  disabled = false;\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  onChange: (value: string) => void = () => {};\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  onTouched: () => void = () => {};\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  onUpdate(event: MouseEvent, id: number): void {\n    event.stopPropagation();\n    if (this.disabled) {\n      return;\n    }\n\n    this.selectedId = id;\n    this.onChange(this.getValue(id) ?? this.options[0].value);\n\n    this.isOpen = false;\n  }\n\n  getLabel(optionId: number): string | undefined {\n    return this.options.find(el => el.id === optionId)?.label;\n  }\n\n  getValue(optionId: number): string | undefined {\n    return this.options.find(el => el.id === optionId)?.value;\n  }\n\n  getId(label: string): number | undefined {\n    return this.options.find(el => el.label === label)?.id;\n  }\n\n  onClickOutside() {\n    this.isOpen = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/** @format */\n\n.field {\n  &__input {\n    position: relative;\n    z-index: 2;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 15px 25px;\n    color: var(--gray-100);\n    background-color: transparent;\n    border: 1px solid var(--gray-100);\n    border-radius: var(--rounded-lg);\n    outline: none;\n\n    &--placeholder {\n      color: rgba(#fff, 0.3);\n    }\n  }\n\n  &__options {\n    position: absolute;\n    top: 25px;\n    right: 0;\n    left: 0;\n    padding-top: 25px;\n    background-color: #000;\n  }\n\n  &__option {\n    padding: 5px 25px;\n    color: var(--gray-100);\n    background-color: #000;\n  }\n\n  &__arrow {\n    color: var(--gray-100);\n    transition: transform 0.2s;\n\n    &--filpped {\n      transform: rotate(180deg);\n    }\n  }\n}\n",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 24
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<!-- @format -->\n\n<div class=\"field\" (clickOutside)=\"onClickOutside()\">\n  <div\n    class=\"field__input\"\n    [class.field__input--placeholder]=\"!selectedId\"\n    (click)=\"isOpen = !isOpen\"\n  >\n    {{ selectedId ? getLabel(selectedId) || basicLabel : basicLabel }}\n    <app-icon\n      class=\"field__arrow\"\n      [class.field__arrow--filpped]=\"isOpen\"\n      icon=\"arrow-no-body\"\n      appWidth=\"16\"\n      appHeight=\"9\"\n    ></app-icon>\n  </div>\n  <ul *ngIf=\"isOpen\" class=\"field__options\">\n    <li *ngFor=\"let option of options\" class=\"field__option\" (click)=\"onUpdate($event, option.id)\">\n      {{ option.label }}\n    </li>\n  </ul>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-846a76f6aba08d1d4611c9ea801bcad428b4a1f84323084cca97035848977fe697e867d475d35f402a02671eaa5837ce870686bfb5e0249ef6f623cc9900d4cd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "/** @format */\n\nimport { APP_INITIALIZER, ErrorHandler, NgModule } from \"@angular/core\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport * as Sentry from \"@sentry/angular\";\nimport { AppRoutingModule } from \"./app-routing.module\";\nimport { AppComponent } from \"./app.component\";\nimport { Router } from \"@angular/router\";\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { CoreModule } from \"./core/core.module\";\nimport { UiModule } from \"./ui/ui.module\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { NgxMaskModule } from \"ngx-mask\";\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    CoreModule,\n    UiModule,\n    AuthModule,\n    ReactiveFormsModule,\n    NgxMaskModule.forRoot(),\n  ],\n  providers: [\n    {\n      provide: ErrorHandler,\n      useValue: Sentry.createErrorHandler({\n        showDialog: true,\n      }),\n    },\n    {\n      provide: Sentry.TraceService,\n      deps: [Router],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: () => () => {},\n      deps: [Sentry.TraceService],\n      multi: true,\n    },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AuthModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "UiModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-5f0a73c5b7184738a6bf3bb27e71db5b3ae0e82e0a1eae1c19304f7dd2572ffb1f73d1daa98ccd1d88727b005d71d07452642dd2f1074706fa6260127b4b5805",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "/** @format */\n\nimport { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { AppComponent } from \"./app.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: AppComponent,\n  },\n  {\n    path: \"auth\",\n    loadChildren: () => \"import(\\\"./auth/auth.module\\\").then(m => m.AuthModule)\",\n  },\n  {\n    path: \"error\",\n    loadChildren: () => \"import(\\\"./error/error.module\\\").then(m => m.ErrorModule)\",\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "id": "module-AuthModule-2f89381e120a4d3764c0b45b81958553afdc4b624cf73ef1c3aab41476fd2685c0b53cface37f159fc6f6c8901c9bba93dc63f27e5207f87114cb5443a0e3860",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/auth/auth.module.ts",
            "methods": [],
            "sourceCode": "/** @format */\n\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { AuthService } from \"./services\";\nimport { AuthComponent } from \"./auth.component\";\nimport { AuthRoutingModule } from \"./auth-routing.module\";\nimport { LoginComponent } from \"./login/login.component\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { UiModule } from \"../ui/ui.module\";\nimport { RegisterComponent } from \"./register/register.component\";\nimport { CoreModule } from \"../core/core.module\";\n\n@NgModule({\n  declarations: [AuthComponent, LoginComponent, RegisterComponent],\n  providers: [AuthService],\n  imports: [CommonModule, AuthRoutingModule, CoreModule, ReactiveFormsModule, UiModule],\n})\nexport class AuthModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "UiModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthRoutingModule",
            "id": "module-AuthRoutingModule-97e147c31c4b269e768bfeca83956ac083d7f53a63a77cdde4265ee9caebcc479d44688725d7a5cabda3d9f6ed27f1e167bbaf123a6dcd46a1f96305b5de08e1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/auth/auth-routing.module.ts",
            "methods": [],
            "sourceCode": "/** @format */\n\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { AuthComponent } from \"./auth.component\";\nimport { NgModule } from \"@angular/core\";\nimport { LoginComponent } from \"./login/login.component\";\nimport { RegisterComponent } from \"./register/register.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: AuthComponent,\n    children: [\n      {\n        path: \"login\",\n        component: LoginComponent,\n      },\n      {\n        path: \"register\",\n        component: RegisterComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AuthRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-61eb3f78ed3ad104703b2ace77b261531ae250c8e84f4ce2ce976bf2e69c3c31eed1914ca28b2cd08fc9998bd20f4476afe6a77720c5945197f801fa70b49b75",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "/** @format */\n\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport { BearerTokenInterceptor } from \"./interceptors/bearer-token.interceptor\";\nimport { ApiService } from \"./services\";\nimport { CamelcaseInterceptor } from \"./interceptors/camelcase.interceptor\";\nimport { ControlErrorPipe } from \"./pipes/control-error.pipe\";\n\n@NgModule({\n  declarations: [ControlErrorPipe],\n  imports: [CommonModule],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: BearerTokenInterceptor,\n      multi: true,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: CamelcaseInterceptor,\n      multi: true,\n    },\n    ApiService,\n  ],\n  exports: [ControlErrorPipe],\n})\nexport class CoreModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ApiService"
                        },
                        {
                            "name": "BearerTokenInterceptor"
                        },
                        {
                            "name": "CamelcaseInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ControlErrorPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ControlErrorPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ErrorModule",
            "id": "module-ErrorModule-8c075b1c5943ce0c076f8dd7375b469f6da2df9cc74ed59066ede5deeddedfa1fc427d0180558a15e18bf8a659afe711f1e466fec32065937d2b002ac4b8eea7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/error/error.module.ts",
            "methods": [],
            "sourceCode": "/** @format */\n\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { ErrorComponent } from \"./error.component\";\nimport { ErrorRoutingModule } from \"./error-routing.module\";\nimport { ErrorCodeComponent } from \"./code/error-code.component\";\nimport { ErrorNotFoundComponent } from \"./not-found/error-not-found.component\";\n\n@NgModule({\n  declarations: [ErrorComponent, ErrorCodeComponent, ErrorNotFoundComponent],\n  imports: [CommonModule, ErrorRoutingModule],\n})\nexport class ErrorModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ErrorCodeComponent"
                        },
                        {
                            "name": "ErrorComponent"
                        },
                        {
                            "name": "ErrorNotFoundComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ErrorRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ErrorRoutingModule",
            "id": "module-ErrorRoutingModule-0d09bf3102c510d934b4c4c0508d28c608cc2f274587418a979fe8e89e83c0d159561ad9d981e2e60f7c50b7d72136175bbfd977fbb9223e207baae854b8d447",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/error/error-routing.module.ts",
            "methods": [],
            "sourceCode": "/** @format */\n\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { ErrorComponent } from \"./error.component\";\nimport { NgModule } from \"@angular/core\";\nimport { ErrorCodeComponent } from \"./code/error-code.component\";\nimport { ErrorNotFoundComponent } from \"./not-found/error-not-found.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ErrorComponent,\n    children: [\n      {\n        path: \"404\",\n        component: ErrorNotFoundComponent,\n      },\n      {\n        path: \":code\",\n        component: ErrorCodeComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ErrorRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UiModule",
            "id": "module-UiModule-98c5d4b2ff15a44b91b2e00a7dc84630bb5147ab5bb211b27fa46c092c2216e1cdd3e139b7fce8dab3105f022dd0a2c521e0b6a53b25484e5824a9d20dbe7554",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui/ui.module.ts",
            "methods": [],
            "sourceCode": "/** @format */\n\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport {\n  ButtonComponent,\n  CheckboxComponent,\n  ErrorMessageComponent,\n  IconComponent,\n  InputComponent,\n  SelectComponent,\n} from \"./components\";\nimport { ClickOutsideModule } from \"ng-click-outside\";\nimport { NgxMaskModule } from \"ngx-mask\";\n\n@NgModule({\n  declarations: [\n    ButtonComponent,\n    InputComponent,\n    CheckboxComponent,\n    IconComponent,\n    SelectComponent,\n    ErrorMessageComponent,\n  ],\n  imports: [CommonModule, ClickOutsideModule, NgxMaskModule],\n  exports: [\n    ButtonComponent,\n    InputComponent,\n    CheckboxComponent,\n    IconComponent,\n    SelectComponent,\n    ErrorMessageComponent,\n  ],\n})\nexport class UiModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "ErrorMessageComponent"
                        },
                        {
                            "name": "IconComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "SelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "ErrorMessageComponent"
                        },
                        {
                            "name": "IconComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "SelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/components/error-message/error-message.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/components/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/components/select/select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context(\"./\", true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/components/checkbox/checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  sentryDns: \"\",\n  apiUrl: \"http://dartt0n.xyz:8080\",\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  sentryDns: \"https://fc61f416df6044bab8c7e1afd55f4355@o1186023.ingest.sentry.io/6577563\",\n  apiUrl: \"http://dartt0n.xyz:8080\",\n}"
            },
            {
                "name": "PrimaryLg",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  template: \"<app-button size='lg'>click</app-button>\",\n})"
            },
            {
                "name": "PrimaryMd",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  template: \"<app-button size='md'>click</app-button>\",\n})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/components/error-message/error-message.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: args,\n  template: \"<app-error-message>Ошибка</app-error-message>\",\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/components/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/components/checkbox/checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/components/select/select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({ props: args })"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "ErrorCode",
                "childs": [
                    {
                        "name": "NOT_FOUND",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "404"
                    },
                    {
                        "name": "SERVER_ERROR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "500"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/error/models/error-code.ts"
            },
            {
                "name": "ErrorMessage",
                "childs": [
                    {
                        "name": "AUTH_EMAIL_EXIST",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Аккаунт с таким email уже зарегистрирован"
                    },
                    {
                        "name": "AUTH_WRONG_AUTH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Неправильный логин или пароль"
                    },
                    {
                        "name": "AUTH_WRONG_PASSWORD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Неправильный пароль"
                    },
                    {
                        "name": "AUTH_EMAIL_NOT_EXIST",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Аккаунт с таким email не зарегистрирован"
                    },
                    {
                        "name": "VALIDATION_TOO_LONG",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Максимальная длинна:"
                    },
                    {
                        "name": "VALIDATION_TOO_SHORT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Минимальная длинна:"
                    },
                    {
                        "name": "VALIDATION_REQUIRED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Обязательное поле"
                    },
                    {
                        "name": "VALIDATION_EMAIL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Введенное значение не соответствует формату email"
                    },
                    {
                        "name": "VALIDATION_PASSWORD_UNMATCH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Пароли не совпадают"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/error/models/error-message.ts"
            }
        ],
        "groupedVariables": {
            "src/app/ui/components/error-message/error-message.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/components/error-message/error-message.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/components/error-message/error-message.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: args,\n  template: \"<app-error-message>Ошибка</app-error-message>\",\n})"
                }
            ],
            "src/app/ui/components/input/input.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/components/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/components/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: args,\n})"
                }
            ],
            "src/app/ui/components/select/select.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/components/select/select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/components/select/select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({ props: args })"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context(\"./\", true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/ui/components/checkbox/checkbox.stories.ts": [
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/components/checkbox/checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/components/checkbox/checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: args,\n})"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  sentryDns: \"\",\n  apiUrl: \"http://dartt0n.xyz:8080\",\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  sentryDns: \"https://fc61f416df6044bab8c7e1afd55f4355@o1186023.ingest.sentry.io/6577563\",\n  apiUrl: \"http://dartt0n.xyz:8080\",\n}"
                }
            ],
            "src/app/ui/components/button/button.stories.ts": [
                {
                    "name": "PrimaryLg",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  template: \"<app-button size='lg'>click</app-button>\",\n})"
                },
                {
                    "name": "PrimaryMd",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  template: \"<app-button size='md'>click</app-button>\",\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/error/models/error-code.ts": [
                {
                    "name": "ErrorCode",
                    "childs": [
                        {
                            "name": "NOT_FOUND",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "404"
                        },
                        {
                            "name": "SERVER_ERROR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "500"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/error/models/error-code.ts"
                }
            ],
            "src/app/error/models/error-message.ts": [
                {
                    "name": "ErrorMessage",
                    "childs": [
                        {
                            "name": "AUTH_EMAIL_EXIST",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Аккаунт с таким email уже зарегистрирован"
                        },
                        {
                            "name": "AUTH_WRONG_AUTH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Неправильный логин или пароль"
                        },
                        {
                            "name": "AUTH_WRONG_PASSWORD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Неправильный пароль"
                        },
                        {
                            "name": "AUTH_EMAIL_NOT_EXIST",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Аккаунт с таким email не зарегистрирован"
                        },
                        {
                            "name": "VALIDATION_TOO_LONG",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Максимальная длинна:"
                        },
                        {
                            "name": "VALIDATION_TOO_SHORT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Минимальная длинна:"
                        },
                        {
                            "name": "VALIDATION_REQUIRED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Обязательное поле"
                        },
                        {
                            "name": "VALIDATION_EMAIL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Введенное значение не соответствует формату email"
                        },
                        {
                            "name": "VALIDATION_PASSWORD_UNMATCH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Пароли не совпадают"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/error/models/error-message.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "AppComponent"
                    },
                    {
                        "path": "auth",
                        "loadChildren": "./auth/auth.module#AuthModule"
                    },
                    {
                        "path": "error",
                        "loadChildren": "./error/error.module#ErrorModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/error/error-routing.module.ts",
                                        "module": "ErrorRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "ErrorComponent",
                                                "children": [
                                                    {
                                                        "path": "404",
                                                        "component": "ErrorNotFoundComponent"
                                                    },
                                                    {
                                                        "path": ":code",
                                                        "component": "ErrorCodeComponent"
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "ErrorModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/auth/auth-routing.module.ts",
                "module": "AuthRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "AuthComponent",
                        "children": [
                            {
                                "path": "login",
                                "component": "LoginComponent"
                            },
                            {
                                "path": "register",
                                "component": "RegisterComponent"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/models/http.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoginRequest",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/models/http.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoginResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/models/http.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RefreshResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/models/http.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RegisterRequest",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/models/http.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RegisterResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/models/tokens.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Tokens",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/bearer-token.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "BearerTokenInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/camelcase.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "CamelcaseInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/http.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApiError",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/pipes/control-error.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ControlErrorPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/validation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ValidationService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/error/code/error-code.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorCodeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/error/error.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/error/not-found/error-not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorNotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/error/services/error.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ErrorService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryLg",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryMd",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/components/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/components/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/components/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/components/error-message/error-message.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorMessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/components/error-message/error-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/components/error-message/error-message.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/components/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/components/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}