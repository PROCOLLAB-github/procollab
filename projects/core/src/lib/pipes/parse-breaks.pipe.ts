/** @format */

import { Pipe, type PipeTransform } from "@angular/core";

/**
 * Пайп для преобразования символов новой строки в HTML теги <br>
 *
 * Назначение:
 * - Преобразует текстовые переносы строк (\n) в HTML переносы (<br>)
 * - Позволяет корректно отображать многострочный текст в HTML
 * - Сохраняет форматирование текста, введенного пользователем
 *
 * Применение:
 * - Отображение пользовательского контента (комментарии, описания)
 * - Сохранение форматирования в textarea
 * - Преобразование текста из API для отображения в HTML
 *
 * Безопасность:
 * - Пайп только заменяет \n на <br>, не выполняет другие HTML преобразования
 * - Для безопасного отображения HTML используйте с [innerHTML]
 * - Рекомендуется санитизация контента перед использованием
 */
@Pipe({
  name: "parseBreaks",
  standalone: true,
})
export class ParseBreaksPipe implements PipeTransform {
  /**
   * Преобразует символы новой строки в HTML теги <br>
   * @param value - Исходная строка с символами \n
   * @returns Строка с замененными \n на <br>
   *
   * Преобразование:
   * - Каждый символ \n заменяется на <br>
   * - Множественные \n\n становятся <br><br>
   * - Исходная строка не изменяется, возвращается новая
   *
   * Примеры использования:
   *
   * В компоненте:
   * userText = "Первая строка\nВторая строка\n\nТретья строка";
   *
   * В шаблоне:
   * <!-- Безопасное отображение с innerHTML -->
   * <div [innerHTML]="userText | parseBreaks"></div>
   *
   * Результат в HTML:
   * <div>
   *   Первая строка<br>Вторая строка<br><br>Третья строка
   * </div>
   *
   * Отображение в браузере:
   * Первая строка
   * Вторая строка
   *
   * Третья строка
   *
   * Альтернативы:
   * - CSS white-space: pre-wrap (сохраняет \n как есть)
   * - Ручная обработка в компоненте
   * - Использование специальных компонентов для текста
   */
  transform(value: string): string {
    // Глобальная замена всех вхождений \n на <br>
    return value.replace(/\n/g, "<br>");
  }
}
