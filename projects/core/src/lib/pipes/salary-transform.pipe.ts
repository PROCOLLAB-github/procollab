/** @format */

import { Pipe, type PipeTransform } from "@angular/core";

/**
 * Пайп для форматирования зарплаты с разделителями тысяч
 *
 * Назначение:
 * - Преобразует числовые значения зарплаты в читаемый формат
 * - Добавляет пробелы как разделители тысяч по российским стандартам
 * - Обрабатывает как строковые, так и числовые значения
 *
 * Форматирование:
 * - 50000 → "50 000"
 * - 1500000 → "1 500 000"
 * - 75000 → "75 000"
 *
 * Применение:
 * - Отображение зарплат в вакансиях
 * - Форматирование финансовых данных
 * - Улучшение читаемости больших чисел
 *
 * Локализация:
 * - Использует российский стандарт разделения (пробелы)
 * - Совместимо с рублевой валютой
 */
@Pipe({
  name: "salaryTransform",
  standalone: true,
})
export class SalaryTransformPipe implements PipeTransform {
  /**
   * Форматирует зарплату с разделителями тысяч
   * @param value - Значение зарплаты (строка или число)
   * @returns Отформатированная строка с разделителями тысяч
   *
   * Обработка входных данных:
   * - Строки преобразуются в числа с помощью parseInt
   * - Если преобразование не удалось (NaN), возвращается исходное значение
   * - Числа форматируются с российской локализацией (ru-RU)
   *
   * Примеры использования в шаблонах:
   *
   * <!-- В карточке вакансии -->
   * <div class="salary">
   *   Зарплата: {{ vacancy.salary | salaryTransform }} ₽
   * </div>
   *
   * <!-- В диапазоне зарплат -->
   * <span class="salary-range">
   *   {{ job.salaryFrom | salaryTransform }} - {{ job.salaryTo | salaryTransform }} ₽
   * </span>
   *
   * <!-- В форме -->
   * <input
   *   type="text"
   *   [value]="salaryControl.value | salaryTransform"
   *   placeholder="Введите зарплату">
   *
   * Примеры результатов:
   * - "50000" → "50 000"
   * - "1500000" → "1 500 000"
   * - "abc" → "abc" (некорректное значение возвращается как есть)
   * - 75000 → "75 000"
   * - 0 → "0"
   *
   * Технические детали:
   * - Использует toLocaleString('ru-RU') для российского форматирования
   * - parseInt с radix 10 для безопасного преобразования строк
   * - Проверка на NaN для обработки некорректных значений
   */
  transform(value: string): string {
    // Преобразуем строку в число
    const numberValue = Number.parseInt(value, 10);

    // Если преобразование не удалось, возвращаем исходное значение
    if (isNaN(numberValue)) {
      return value;
    }

    // Форматируем число с российской локализацией
    // ru-RU использует пробелы как разделители тысяч
    return numberValue.toLocaleString("ru-RU");
  }
}
